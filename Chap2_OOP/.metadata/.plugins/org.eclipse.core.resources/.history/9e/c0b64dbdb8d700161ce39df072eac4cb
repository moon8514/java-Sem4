package bai5_Matrix;

public class Matrix {
	private int row, col;
	
	private int[][] arr;
	
	public int getRow() {
		return row;
	}

	public int getCol() {
		return col;
	}

	public Matrix(int rows, int cols) {
		this.row = rows;
		this.col = cols;
		arr = new int[row][col];
	}
	
	public void input() {
		for(int i = 0; i < row; i++){
			for(int j = 0; j < col; j++){
				arr[i][j] = (int) (Math.random()*100);
			}
		}
	}
	
	public void display() {
		for(int i = 0; i < row; i++){
			for(int j = 0; j < col; j++){
				System.out.print(arr[i][j] + " ");
			}
			System.out.println();
		}
	}
	
	public void add (Matrix m2){
		for(int i = 0; i < row; i++){
			for(int j = 0; j < col; j++){
				arr[i][j] += m2.arr[i][j];
			}
		}
	}
	
	public void sub (Matrix m2){
		for(int i = 0; i < row; i++){
			for(int j = 0; j < col; j++){
				arr[i][j] -= m2.arr[i][j];
			}
		}
	}
	
	public void prod(Matrix m2) {
		int rowTemp = this.getRow();
		int colTemp = m2.getCol();
		int mid = this.getCol();
		Matrix maTemp = new Matrix(rowTemp, colTemp);
		
		for(int i = 0; i < rowTemp; i++){
			for(int j = 0; j < colTemp; j++){
				maTemp.arr[i][j] = 0;
				for(int k = 0; k < mid; k++){
					maTemp.arr[i][j] += this.arr[i][k] * m2.arr[k][j]; 
				}
			}
		}
		row = rowTemp;
		col = colTemp;
		this.arr = maTemp.arr;
	}
	
	public void transpose() {
		int rowTemp = this.getCol();
		int colTemp = this.getRow();
		Matrix maTemp = new Matrix(rowTemp, colTemp);
		
		for(int i = 0; i < rowTemp; i++){
			for(int j = 0; j < colTemp; j++){
				maTemp.arr[i][j] = this.arr[j][i];
			}
		}

		row = rowTemp;
		col = colTemp;
		this.arr = maTemp.arr;
	}
	
	public boolean isSquare() {
		if(row == col) return true;
		else return false;
	}
	
	public void rowSwap(int i, int j){
		i--; j--;
		for(int x = 0 ; x < col; x++) {
			arr[i][x] = arr[i][x] ^ arr[j][x];
			arr[j][x] = arr[i][x] ^ arr[j][x];
			arr[i][x] = arr[i][x] ^ arr[j][x];
		}
	}
	
	public void colSwap(int i, int j){
		i--; j--;
		for(int x = 0 ; x < row; x++) {
			arr[x][i] = arr[x][i] ^ arr[x][j];
			arr[x][j] = arr[x][i] ^ arr[x][j];
			arr[x][i] = arr[x][i] ^ arr[x][j];
		}
	}
	
	public int sumRow(int i){
		int sum = 0;
		i--;
		for(int x = 0; x < col; x++) sum+=arr[i][x];
		return sum;
	}
	
	public int sumCol(int i){
		int sum = 0;
		i--;
		for(int x = 0; x < row; x++) sum+=arr[x][i];
		return sum;
	}
	
	public int max(){
		int max = 0;
		for(int i = 0; i < row; i++) {
			for(int j = 0; j < col; j++) {
				if(arr[i][j] > max) max = arr[i][j];
			}
		}
		return max;
	}
	
	public int min(){
		int min = arr[0][0];
		for(int i = 0; i < row; i++) {
			for(int j = 0; j < col; j++) {
				if(arr[i][j] < min) min = arr[i][j];
			}
		}
		return min;
	}
	
	public int maxRow(int i){
		i--;
		int max = 0;
		for(int j = 0; j < col; j++) if(arr[i][j] > max) max = arr[i][j];
		return max;
	}
	
	public int minRow(int i){
		i--;
		int min = arr[i][0];
		for(int j = 0; j < col; j++) if(arr[i][j] < min) min = arr[i][j];
		return min;
	}
	
	public int maxCol(int i){
		i--;
		int max = 0;
		for(int j = 0; j < col; j++) max = max < arr[i][j] ? arr[i][j]:;
		return max;
	}
}
